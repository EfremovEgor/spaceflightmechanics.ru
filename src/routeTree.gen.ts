/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegistrationRouteImport } from './routes/registration'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CommitteeRouteImport } from './routes/committee'
import { Route as AbstractSubmissionRouteImport } from './routes/abstract-submission'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionsAndHighlightsTechnicalSessionsRouteImport } from './routes/sessions-and-highlights/technical-sessions'
import { Route as SessionsAndHighlightsPlenarySessionsRouteImport } from './routes/sessions-and-highlights/plenary-sessions'
import { Route as SessionsAndHighlightsHighlightLecturesRouteImport } from './routes/sessions-and-highlights/highlight-lectures'

const RegistrationRoute = RegistrationRouteImport.update({
  id: '/registration',
  path: '/registration',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CommitteeRoute = CommitteeRouteImport.update({
  id: '/committee',
  path: '/committee',
  getParentRoute: () => rootRouteImport,
} as any)
const AbstractSubmissionRoute = AbstractSubmissionRouteImport.update({
  id: '/abstract-submission',
  path: '/abstract-submission',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsAndHighlightsTechnicalSessionsRoute =
  SessionsAndHighlightsTechnicalSessionsRouteImport.update({
    id: '/sessions-and-highlights/technical-sessions',
    path: '/sessions-and-highlights/technical-sessions',
    getParentRoute: () => rootRouteImport,
  } as any)
const SessionsAndHighlightsPlenarySessionsRoute =
  SessionsAndHighlightsPlenarySessionsRouteImport.update({
    id: '/sessions-and-highlights/plenary-sessions',
    path: '/sessions-and-highlights/plenary-sessions',
    getParentRoute: () => rootRouteImport,
  } as any)
const SessionsAndHighlightsHighlightLecturesRoute =
  SessionsAndHighlightsHighlightLecturesRouteImport.update({
    id: '/sessions-and-highlights/highlight-lectures',
    path: '/sessions-and-highlights/highlight-lectures',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/abstract-submission': typeof AbstractSubmissionRoute
  '/committee': typeof CommitteeRoute
  '/contact': typeof ContactRoute
  '/registration': typeof RegistrationRoute
  '/sessions-and-highlights/highlight-lectures': typeof SessionsAndHighlightsHighlightLecturesRoute
  '/sessions-and-highlights/plenary-sessions': typeof SessionsAndHighlightsPlenarySessionsRoute
  '/sessions-and-highlights/technical-sessions': typeof SessionsAndHighlightsTechnicalSessionsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/abstract-submission': typeof AbstractSubmissionRoute
  '/committee': typeof CommitteeRoute
  '/contact': typeof ContactRoute
  '/registration': typeof RegistrationRoute
  '/sessions-and-highlights/highlight-lectures': typeof SessionsAndHighlightsHighlightLecturesRoute
  '/sessions-and-highlights/plenary-sessions': typeof SessionsAndHighlightsPlenarySessionsRoute
  '/sessions-and-highlights/technical-sessions': typeof SessionsAndHighlightsTechnicalSessionsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/abstract-submission': typeof AbstractSubmissionRoute
  '/committee': typeof CommitteeRoute
  '/contact': typeof ContactRoute
  '/registration': typeof RegistrationRoute
  '/sessions-and-highlights/highlight-lectures': typeof SessionsAndHighlightsHighlightLecturesRoute
  '/sessions-and-highlights/plenary-sessions': typeof SessionsAndHighlightsPlenarySessionsRoute
  '/sessions-and-highlights/technical-sessions': typeof SessionsAndHighlightsTechnicalSessionsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/abstract-submission'
    | '/committee'
    | '/contact'
    | '/registration'
    | '/sessions-and-highlights/highlight-lectures'
    | '/sessions-and-highlights/plenary-sessions'
    | '/sessions-and-highlights/technical-sessions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/abstract-submission'
    | '/committee'
    | '/contact'
    | '/registration'
    | '/sessions-and-highlights/highlight-lectures'
    | '/sessions-and-highlights/plenary-sessions'
    | '/sessions-and-highlights/technical-sessions'
  id:
    | '__root__'
    | '/'
    | '/abstract-submission'
    | '/committee'
    | '/contact'
    | '/registration'
    | '/sessions-and-highlights/highlight-lectures'
    | '/sessions-and-highlights/plenary-sessions'
    | '/sessions-and-highlights/technical-sessions'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AbstractSubmissionRoute: typeof AbstractSubmissionRoute
  CommitteeRoute: typeof CommitteeRoute
  ContactRoute: typeof ContactRoute
  RegistrationRoute: typeof RegistrationRoute
  SessionsAndHighlightsHighlightLecturesRoute: typeof SessionsAndHighlightsHighlightLecturesRoute
  SessionsAndHighlightsPlenarySessionsRoute: typeof SessionsAndHighlightsPlenarySessionsRoute
  SessionsAndHighlightsTechnicalSessionsRoute: typeof SessionsAndHighlightsTechnicalSessionsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/registration': {
      id: '/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof RegistrationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/committee': {
      id: '/committee'
      path: '/committee'
      fullPath: '/committee'
      preLoaderRoute: typeof CommitteeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/abstract-submission': {
      id: '/abstract-submission'
      path: '/abstract-submission'
      fullPath: '/abstract-submission'
      preLoaderRoute: typeof AbstractSubmissionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions-and-highlights/technical-sessions': {
      id: '/sessions-and-highlights/technical-sessions'
      path: '/sessions-and-highlights/technical-sessions'
      fullPath: '/sessions-and-highlights/technical-sessions'
      preLoaderRoute: typeof SessionsAndHighlightsTechnicalSessionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions-and-highlights/plenary-sessions': {
      id: '/sessions-and-highlights/plenary-sessions'
      path: '/sessions-and-highlights/plenary-sessions'
      fullPath: '/sessions-and-highlights/plenary-sessions'
      preLoaderRoute: typeof SessionsAndHighlightsPlenarySessionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions-and-highlights/highlight-lectures': {
      id: '/sessions-and-highlights/highlight-lectures'
      path: '/sessions-and-highlights/highlight-lectures'
      fullPath: '/sessions-and-highlights/highlight-lectures'
      preLoaderRoute: typeof SessionsAndHighlightsHighlightLecturesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AbstractSubmissionRoute: AbstractSubmissionRoute,
  CommitteeRoute: CommitteeRoute,
  ContactRoute: ContactRoute,
  RegistrationRoute: RegistrationRoute,
  SessionsAndHighlightsHighlightLecturesRoute:
    SessionsAndHighlightsHighlightLecturesRoute,
  SessionsAndHighlightsPlenarySessionsRoute:
    SessionsAndHighlightsPlenarySessionsRoute,
  SessionsAndHighlightsTechnicalSessionsRoute:
    SessionsAndHighlightsTechnicalSessionsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
